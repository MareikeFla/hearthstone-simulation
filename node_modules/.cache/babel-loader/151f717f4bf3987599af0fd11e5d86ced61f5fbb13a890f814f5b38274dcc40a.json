{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n  let countMyCardMinions = myCard.minions.length;\n  let countOpponentMinions = opponent.minions.length;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Set result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n\n  // Return result\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}\nfunction fightArrays(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  return opponentsArray;\n}\nconst foo = fightArrays(CardDefinitions[4], CardDefinitions[9]);\nconsole.log(foo);","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","myCardHasDevineShield","keywords","includes","opponentHasDevineShield","countMyCardMinions","minions","length","countOpponentMinions","attack","health","fightAll","results","map","win","filter","loose","draw","fightArrays","myCardArray","opponentsArray","shift","foo","console","log"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n  let countMyCardMinions = myCard.minions.length;\n  let countOpponentMinions = opponent.minions.length;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Set result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n\n  // Return result\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n\nfunction fightArrays(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health =\n        opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  return opponentsArray;\n}\n\nconst foo = fightArrays(CardDefinitions[4], CardDefinitions[9]);\nconsole.log(foo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}