{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n  let removedDivineShieldFromMyCard = false;\n  let removedDivineShieldFromOppponent = false;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.keywords.includes(\"Divine Shield\")) {\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    console.log(\"removed double Devine Shiled\", myCard.name, opponent.name);\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    console.log(\"removed  Devine Shiled from:\", myCard.name);\n  }\n  if (opponent.keywords.includes(\"Divine Shield\") && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    console.log(\"removed  Devine Shiled from:\", opponent.name, myCard.health);\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    console.log(myCard.name, opponent.name, myCard.keywords.includes(\"Divine Shield\"));\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    // console.log(opponent.name, myCard.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","removedDivineShieldFromMyCard","removedDivineShieldFromOppponent","attack","console","log","name","keywords","includes","splice","findIndex","keyword","health","fightAll","results","map","win","filter","length","loose","draw"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n  let removedDivineShieldFromMyCard = false;\n  let removedDivineShieldFromOppponent = false;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (\n    myCard.keywords.includes(\"Divine Shield\") &&\n    opponent.keywords.includes(\"Divine Shield\")\n  ) {\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    console.log(\"removed double Devine Shiled\", myCard.name, opponent.name);\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    console.log(\"removed  Devine Shiled from:\", myCard.name);\n  }\n  if (opponent.keywords.includes(\"Divine Shield\") && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    console.log(\"removed  Devine Shiled from:\", opponent.name, myCard.health);\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    console.log(\n      myCard.name,\n      opponent.name,\n      myCard.keywords.includes(\"Divine Shield\")\n    );\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    // console.log(opponent.name, myCard.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAE3D,SAASC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC3B,IAAIC,MAAM,GAAG;IAAE,GAAGF;EAAM,CAAC;EACzB,IAAIG,QAAQ,GAAG;IAAE,GAAGF;EAAM,CAAC;EAC3B,IAAIG,MAAM,GAAG,IAAI;EACjB,IAAIC,6BAA6B,GAAG,KAAK;EACzC,IAAIC,gCAAgC,GAAG,KAAK;;EAE5C;EACA,IAAIJ,MAAM,CAACK,MAAM,KAAK,CAAC,IAAIJ,QAAQ,CAACI,MAAM,KAAK,CAAC,EAAE;IAChDC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEP,MAAM,CAACQ,IAAI,EAAEP,QAAQ,CAACO,IAAI,CAAC;IACjE,OAAO,MAAM;EACf;;EAEA;EACA,IACER,MAAM,CAACS,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC,IACzCT,QAAQ,CAACQ,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC,EAC3C;IACAV,MAAM,CAACS,QAAQ,CAACE,MAAM,CACpBX,MAAM,CAACS,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CAAC,EACnEb,MAAM,CAACS,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CACpE,CAAC;IACDZ,QAAQ,CAACQ,QAAQ,CAACE,MAAM,CACtBV,QAAQ,CAACQ,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CAAC,EACrEZ,QAAQ,CAACQ,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CACtE,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEP,MAAM,CAACQ,IAAI,EAAEP,QAAQ,CAACO,IAAI,CAAC;EACzE;EACA;;EAEA,IAAIR,MAAM,CAACS,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC,IAAIT,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAE;IACpEJ,QAAQ,CAACa,MAAM,GAAGb,QAAQ,CAACa,MAAM,GAAGd,MAAM,CAACK,MAAM;IAEjDL,MAAM,CAACS,QAAQ,CAACE,MAAM,CACpBX,MAAM,CAACS,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CAAC,EACnEb,MAAM,CAACS,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CACpE,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEP,MAAM,CAACQ,IAAI,CAAC;EAC1D;EACA,IAAIP,QAAQ,CAACQ,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC,IAAIV,MAAM,CAACK,MAAM,GAAG,CAAC,EAAE;IACpEL,MAAM,CAACc,MAAM,GAAGd,MAAM,CAACc,MAAM,GAAGb,QAAQ,CAACI,MAAM;IAC/CJ,QAAQ,CAACQ,QAAQ,CAACE,MAAM,CACtBV,QAAQ,CAACQ,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CAAC,EACrEZ,QAAQ,CAACQ,QAAQ,CAACG,SAAS,CAAEC,OAAO,IAAKA,OAAO,KAAK,eAAe,CACtE,CAAC;IACDP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEN,QAAQ,CAACO,IAAI,EAAER,MAAM,CAACc,MAAM,CAAC;EAC3E;;EAEA;EACA,OAAOd,MAAM,CAACc,MAAM,GAAG,CAAC,IAAIb,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;IAC/CR,OAAO,CAACC,GAAG,CACTP,MAAM,CAACQ,IAAI,EACXP,QAAQ,CAACO,IAAI,EACbR,MAAM,CAACS,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAC1C,CAAC;IACDV,MAAM,CAACc,MAAM,GAAGd,MAAM,CAACc,MAAM,GAAGb,QAAQ,CAACI,MAAM;IAC/CJ,QAAQ,CAACa,MAAM,GAAGb,QAAQ,CAACa,MAAM,GAAGd,MAAM,CAACK,MAAM;EACnD;;EAEA;EACA,IAAIL,MAAM,CAACc,MAAM,GAAG,CAAC,EAAE;IACrBZ,MAAM,GAAG,KAAK;EAChB,CAAC,MAAM,IAAID,QAAQ,CAACa,MAAM,GAAG,CAAC,EAAE;IAC9BZ,MAAM,GAAG,OAAO;EAClB,CAAC,MAAM;IACLA,MAAM,GAAG,MAAM;EACjB;EACA,OAAOA,MAAM;AACf;AAEA,OAAO,SAASa,QAAQA,CAACf,MAAM,EAAE;EAC/B,IAAIgB,OAAO,GAAGpB,eAAe,CAACqB,GAAG,CAAEhB,QAAQ,IAAK;IAC9C;IACA,OAAOJ,KAAK,CAACG,MAAM,EAAEC,QAAQ,CAAC;EAChC,CAAC,CAAC;EACF,OAAO;IACLiB,GAAG,EAAEF,OAAO,CAACG,MAAM,CAAEjB,MAAM,IAAKA,MAAM,KAAK,KAAK,CAAC,CAACkB,MAAM;IACxDC,KAAK,EAAEL,OAAO,CAACG,MAAM,CAAEjB,MAAM,IAAKA,MAAM,KAAK,OAAO,CAAC,CAACkB,MAAM;IAC5DE,IAAI,EAAEN,OAAO,CAACG,MAAM,CAAEjB,MAAM,IAAKA,MAAM,KAAK,MAAM,CAAC,CAACkB;EACtD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}