{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n  if (removedDivineShieldFromMyCard) {\n    myCard.keywords.push(\"Divine Shield\");\n    setRemovedDivineShieldFromMyCard(false);\n    console.log(\"Reset Devine Shield\");\n  }\n  console.log(myCard.name, opponent.name, myCard.keywords.includes(\"Divine Shield\"));\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.keywords.includes(\"Divine Shield\")) {\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    console.log(\"removed double Devine Shiled\", myCard.name, opponent.name);\n    setRemovedDivineShieldFromMyCard(true);\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    setRemovedDivineShieldFromMyCard(true);\n    console.log(\"removed  Devine Shiled from:\", myCard.name);\n  }\n  if (opponent.keywords.includes(\"Divine Shield\") && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    console.log(\"removed  Devine Shiled from:\", opponent.name, myCard.health);\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    // console.log(opponent.name, myCard.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","removedDivineShieldFromMyCard","keywords","push","setRemovedDivineShieldFromMyCard","console","log","name","includes","attack","splice","findIndex","keyword","health","fightAll","results","map","win","filter","length","loose","draw"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n\n  if (removedDivineShieldFromMyCard) {\n    myCard.keywords.push(\"Divine Shield\");\n    setRemovedDivineShieldFromMyCard(false);\n    console.log(\"Reset Devine Shield\");\n  }\n  console.log(\n    myCard.name,\n    opponent.name,\n    myCard.keywords.includes(\"Divine Shield\")\n  );\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (\n    myCard.keywords.includes(\"Divine Shield\") &&\n    opponent.keywords.includes(\"Divine Shield\")\n  ) {\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    console.log(\"removed double Devine Shiled\", myCard.name, opponent.name);\n    setRemovedDivineShieldFromMyCard(true);\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    setRemovedDivineShieldFromMyCard(true);\n    console.log(\"removed  Devine Shiled from:\", myCard.name);\n  }\n  if (opponent.keywords.includes(\"Divine Shield\") && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    console.log(\"removed  Devine Shiled from:\", opponent.name, myCard.health);\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    // console.log(opponent.name, myCard.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}