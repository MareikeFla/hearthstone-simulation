{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let defender = card1;\n  let attacker = card2;\n  let card1Keywords = card1.keywords;\n  let result = null;\n  if (card1.attack === 0 && card2.attack === 0) {\n    return \"draw\";\n  }\n  while (card1Health > 0 && card2Health > 0) {\n    card1Health = card1Health - card2.attack;\n    card2Health = card2Health - card1.attack;\n  }\n  if (card1Health > 0) {\n    result = \"win\";\n  } else if (card2Health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\nexport function fightAll(card) {\n  let results = CardDefinitions.map(opponent => {\n    return fight(card, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","defender","attacker","card1Keywords","keywords","result","attack","card1Health","card2Health","fightAll","card","results","map","opponent","win","filter","length","loose","draw"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let defender = card1;\n  let attacker = card2;\n  let card1Keywords = card1.keywords;\n  let result = null;\n  if (card1.attack === 0 && card2.attack === 0) {\n    return \"draw\";\n  }\n  while (card1Health > 0 && card2Health > 0) {\n    card1Health = card1Health - card2.attack;\n    card2Health = card2Health - card1.attack;\n  }\n  if (card1Health > 0) {\n    result = \"win\";\n  } else if (card2Health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\n\nexport function fightAll(card) {\n  let results = CardDefinitions.map((opponent) => {\n    return fight(card, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAE3D,SAASC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC3B,IAAIC,QAAQ,GAAGF,KAAK;EACpB,IAAIG,QAAQ,GAAGF,KAAK;EACpB,IAAIG,aAAa,GAAGJ,KAAK,CAACK,QAAQ;EAClC,IAAIC,MAAM,GAAG,IAAI;EACjB,IAAIN,KAAK,CAACO,MAAM,KAAK,CAAC,IAAIN,KAAK,CAACM,MAAM,KAAK,CAAC,EAAE;IAC5C,OAAO,MAAM;EACf;EACA,OAAOC,WAAW,GAAG,CAAC,IAAIC,WAAW,GAAG,CAAC,EAAE;IACzCD,WAAW,GAAGA,WAAW,GAAGP,KAAK,CAACM,MAAM;IACxCE,WAAW,GAAGA,WAAW,GAAGT,KAAK,CAACO,MAAM;EAC1C;EACA,IAAIC,WAAW,GAAG,CAAC,EAAE;IACnBF,MAAM,GAAG,KAAK;EAChB,CAAC,MAAM,IAAIG,WAAW,GAAG,CAAC,EAAE;IAC1BH,MAAM,GAAG,OAAO;EAClB,CAAC,MAAM;IACLA,MAAM,GAAG,MAAM;EACjB;EACA,OAAOA,MAAM;AACf;AAEA,OAAO,SAASI,QAAQA,CAACC,IAAI,EAAE;EAC7B,IAAIC,OAAO,GAAGd,eAAe,CAACe,GAAG,CAAEC,QAAQ,IAAK;IAC9C,OAAOf,KAAK,CAACY,IAAI,EAAEG,QAAQ,CAAC;EAC9B,CAAC,CAAC;EACF,OAAO;IACLC,GAAG,EAAEH,OAAO,CAACI,MAAM,CAAEV,MAAM,IAAKA,MAAM,KAAK,KAAK,CAAC,CAACW,MAAM;IACxDC,KAAK,EAAEN,OAAO,CAACI,MAAM,CAAEV,MAAM,IAAKA,MAAM,KAAK,OAAO,CAAC,CAACW,MAAM;IAC5DE,IAAI,EAAEP,OAAO,CAACI,MAAM,CAAEV,MAAM,IAAKA,MAAM,KAAK,MAAM,CAAC,CAACW;EACtD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}