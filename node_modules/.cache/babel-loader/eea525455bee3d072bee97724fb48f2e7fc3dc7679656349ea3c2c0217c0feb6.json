{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  const card1Copy = structuredClone(card1);\n  const myCardArray = [card1Copy, ...card1Copy.minions];\n  const card2Copy = structuredClone(card2);\n  const opponentsArray = [card2Copy, ...card2Copy.minions];\n  let myMinionHasDivineShield = myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield = opponentsArray[0].keywords.includes(\"Divine Shield\");\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      // if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n      //   myMinionHasDivineShield = false;\n      //   opponentMinionHasDivineShield = false;\n      //   console.log(\"Removed Devine Shield from both cards\");\n      // }\n      // if (myMinionHasDivineShield) {\n      //   opponentsArray[0].health =\n      //     opponentsArray[0].health - myCardArray[0].attack;\n      //   if (opponentsArray[0].attack > 0) {\n      //     myMinionHasDivineShield = false;\n      //     console.log(\n      //       \"Removed Devine Shield from my card\",\n      //       opponentsArray[0].minionName\n      //     );\n      //     console.log(\n      //       myCardArray[0].name,\n      //       myCardArray[0].health,\n      //       opponentsArray[0].name,\n      //       opponentsArray[0].health\n      //     );\n      //   }\n      // }\n      // if (opponentMinionHasDivineShield) {\n      //   myCardArray[0].health =\n      //     myCardArray[0].health - opponentsArray[0].attack;\n      //   if (myCardArray[0].attack > 0) {\n      //     opponentMinionHasDivineShield = false;\n      //     console.log(\"Removed Devine Shield from opponent\");\n      //   }\n      // }\n      if (!myMinionHasDivineShield) {\n        myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      } else if (myMinionHasDivineShield && opponentsArray[0].attack > 0) {\n        myMinionHasDivineShield = false;\n      }\n      if (!opponentMinionHasDivineShield) {\n        opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n      } else if (opponentMinionHasDivineShield && myCardArray[0].attack > 0) {\n        opponentMinionHasDivineShield = false;\n      }\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n\n  // myCardArray = [card1, ...card1.minions];\n\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\nexport function fightAll(myCard) {\n  // const results = [];\n  // CardDefinitions.forEach((card) => {\n  //   results.push(fight(myCard, card));\n  // });\n  // return results;\n  let results = CardDefinitions.map(opponent => {\n    return fight(myCard, opponent);\n  });\n  return results;\n\n  // return {\n  //   win: results.filter((result) => result[0] === \"win\").length,\n  //   loose: results.filter((result) => result[0] === \"loose\").length,\n  //   draw: results.filter((result) => result[0] === \"draw\").length,\n  // };\n}\n\n// const foo = fight(CardDefinitions[2], CardDefinitions[3]);\n// console.log(foo);\n\n// const foo2 = fightAll(CardDefinitions[0]);\n// console.log(foo2);","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","card1Copy","structuredClone","myCardArray","minions","card2Copy","opponentsArray","myMinionHasDivineShield","keywords","includes","opponentMinionHasDivineShield","length","health","attack","shift","fightAll","myCard","results","map","opponent"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  const card1Copy = structuredClone(card1);\n  const myCardArray = [card1Copy, ...card1Copy.minions];\n  const card2Copy = structuredClone(card2);\n  const opponentsArray = [card2Copy, ...card2Copy.minions];\n  let myMinionHasDivineShield =\n    myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield =\n    opponentsArray[0].keywords.includes(\"Divine Shield\");\n\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      // if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n      //   myMinionHasDivineShield = false;\n      //   opponentMinionHasDivineShield = false;\n      //   console.log(\"Removed Devine Shield from both cards\");\n      // }\n      // if (myMinionHasDivineShield) {\n      //   opponentsArray[0].health =\n      //     opponentsArray[0].health - myCardArray[0].attack;\n      //   if (opponentsArray[0].attack > 0) {\n      //     myMinionHasDivineShield = false;\n      //     console.log(\n      //       \"Removed Devine Shield from my card\",\n      //       opponentsArray[0].minionName\n      //     );\n      //     console.log(\n      //       myCardArray[0].name,\n      //       myCardArray[0].health,\n      //       opponentsArray[0].name,\n      //       opponentsArray[0].health\n      //     );\n      //   }\n      // }\n      // if (opponentMinionHasDivineShield) {\n      //   myCardArray[0].health =\n      //     myCardArray[0].health - opponentsArray[0].attack;\n      //   if (myCardArray[0].attack > 0) {\n      //     opponentMinionHasDivineShield = false;\n      //     console.log(\"Removed Devine Shield from opponent\");\n      //   }\n      // }\n      if (!myMinionHasDivineShield) {\n        myCardArray[0].health =\n          myCardArray[0].health - opponentsArray[0].attack;\n      } else if (myMinionHasDivineShield && opponentsArray[0].attack > 0) {\n        myMinionHasDivineShield = false;\n      }\n\n      if (!opponentMinionHasDivineShield) {\n        opponentsArray[0].health =\n          opponentsArray[0].health - myCardArray[0].attack;\n      } else if (opponentMinionHasDivineShield && myCardArray[0].attack > 0) {\n        opponentMinionHasDivineShield = false;\n      }\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n\n  // myCardArray = [card1, ...card1.minions];\n\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\n\nexport function fightAll(myCard) {\n  // const results = [];\n  // CardDefinitions.forEach((card) => {\n  //   results.push(fight(myCard, card));\n  // });\n  // return results;\n  let results = CardDefinitions.map((opponent) => {\n    return fight(myCard, opponent);\n  });\n  return results;\n\n  // return {\n  //   win: results.filter((result) => result[0] === \"win\").length,\n  //   loose: results.filter((result) => result[0] === \"loose\").length,\n  //   draw: results.filter((result) => result[0] === \"draw\").length,\n  // };\n}\n\n// const foo = fight(CardDefinitions[2], CardDefinitions[3]);\n// console.log(foo);\n\n// const foo2 = fightAll(CardDefinitions[0]);\n// console.log(foo2);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}