{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n  let countmyCardMinions = myCard.minions;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    // console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n    // console.log(\"removed Devine Shiled from both\");\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n    // console.log(opponent.name, \" removed  Devine Shiled from \", myCard.name);\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n    // console.log(myCard.name, \" removed  Devine Shiled from \", opponent.name);\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return results\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","myCardHasDevineShield","keywords","includes","opponentHasDevineShield","countmyCardMinions","minions","attack","health","fightAll","results","map","win","filter","length","loose","draw"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n  let countmyCardMinions = myCard.minions;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    // console.log(\"prevented endless loop\", myCard.name, opponent.name);\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n    // console.log(\"removed Devine Shiled from both\");\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n    // console.log(opponent.name, \" removed  Devine Shiled from \", myCard.name);\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n    // console.log(myCard.name, \" removed  Devine Shiled from \", opponent.name);\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return results\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAE3D,SAASC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC3B,IAAIC,MAAM,GAAG;IAAE,GAAGF;EAAM,CAAC;EACzB,IAAIG,QAAQ,GAAG;IAAE,GAAGF;EAAM,CAAC;EAC3B,IAAIG,MAAM,GAAG,IAAI;EACjB,IAAIC,qBAAqB,GAAGH,MAAM,CAACI,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC;EACrE,IAAIC,uBAAuB,GAAGL,QAAQ,CAACG,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC;EACzE,IAAIE,kBAAkB,GAAGP,MAAM,CAACQ,OAAO;;EAEvC;EACA,IAAIR,MAAM,CAACS,MAAM,KAAK,CAAC,IAAIR,QAAQ,CAACQ,MAAM,KAAK,CAAC,EAAE;IAChD;IACA,OAAO,MAAM;EACf;;EAEA;EACA,IAAIN,qBAAqB,IAAIG,uBAAuB,EAAE;IACpDH,qBAAqB,GAAG,KAAK;IAC7BG,uBAAuB,GAAG,KAAK;IAC/B;EACF;EACA;;EAEA,IAAIH,qBAAqB,IAAIF,QAAQ,CAACQ,MAAM,GAAG,CAAC,EAAE;IAChDR,QAAQ,CAACS,MAAM,GAAGT,QAAQ,CAACS,MAAM,GAAGV,MAAM,CAACS,MAAM;IACjDN,qBAAqB,GAAG,KAAK;IAC7B;EACF;EACA,IAAIG,uBAAuB,IAAIN,MAAM,CAACS,MAAM,GAAG,CAAC,EAAE;IAChDT,MAAM,CAACU,MAAM,GAAGV,MAAM,CAACU,MAAM,GAAGT,QAAQ,CAACQ,MAAM;IAC/CH,uBAAuB,GAAG,KAAK;IAC/B;EACF;;EAEA;EACA,OAAON,MAAM,CAACU,MAAM,GAAG,CAAC,IAAIT,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;IAC/CV,MAAM,CAACU,MAAM,GAAGV,MAAM,CAACU,MAAM,GAAGT,QAAQ,CAACQ,MAAM;IAC/CR,QAAQ,CAACS,MAAM,GAAGT,QAAQ,CAACS,MAAM,GAAGV,MAAM,CAACS,MAAM;EACnD;;EAEA;EACA,IAAIT,MAAM,CAACU,MAAM,GAAG,CAAC,EAAE;IACrBR,MAAM,GAAG,KAAK;EAChB,CAAC,MAAM,IAAID,QAAQ,CAACS,MAAM,GAAG,CAAC,EAAE;IAC9BR,MAAM,GAAG,OAAO;EAClB,CAAC,MAAM;IACLA,MAAM,GAAG,MAAM;EACjB;EAEA,OAAOA,MAAM;AACf;AAEA,OAAO,SAASS,QAAQA,CAACX,MAAM,EAAE;EAC/B,IAAIY,OAAO,GAAGhB,eAAe,CAACiB,GAAG,CAAEZ,QAAQ,IAAK;IAC9C;IACA,OAAOJ,KAAK,CAACG,MAAM,EAAEC,QAAQ,CAAC;EAChC,CAAC,CAAC;EACF,OAAO;IACLa,GAAG,EAAEF,OAAO,CAACG,MAAM,CAAEb,MAAM,IAAKA,MAAM,KAAK,KAAK,CAAC,CAACc,MAAM;IACxDC,KAAK,EAAEL,OAAO,CAACG,MAAM,CAAEb,MAAM,IAAKA,MAAM,KAAK,OAAO,CAAC,CAACc,MAAM;IAC5DE,IAAI,EAAEN,OAAO,CAACG,MAAM,CAAEb,MAAM,IAAKA,MAAM,KAAK,MAAM,CAAC,CAACc;EACtD,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}