{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n  let myMinionHasDivineShield = myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield = opponentsArray[0].keywords.includes(\"Divine Shield\");\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n        myMinionHasDivineShield = false;\n        opponentMinionHasDivineShield = false;\n      }\n      if (myMinionHasDivineShield) {\n        opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n        myMinionHasDivineShield = false;\n      }\n      if (opponentMinionHasDivineShield) {\n        myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n        opponentMinionHasDivineShield = false;\n      }\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    console.log(myCard, opponent, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result[0] === \"win\").length,\n    loose: results.filter(result => result[0] === \"loose\").length,\n    draw: results.filter(result => result[0] === \"draw\").length\n  };\n}\nfunction fightArrays(card1, card2) {\n  // const myCardArray = [card1, ...card1.minions];\n  // const opponentsArray = [card2, ...card2.minions];\n  // let myMinionHasDivineShield =\n  //   myCardArray[0].keywords.includes(\"Divine Shield\");\n  // let opponentMinionHasDivineShield =\n  //   opponentsArray[0].keywords.includes(\"Divine Shield\");\n  // while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n  //   while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n  //     if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n  //       return [\"draw\", card2];\n  //     }\n  //     if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n  //       myMinionHasDivineShield = false;\n  //       opponentMinionHasDivineShield = false;\n  //     }\n  //     if (myMinionHasDivineShield) {\n  //       opponentsArray[0].health =\n  //         opponentsArray[0].health - myCardArray[0].attack;\n  //       myMinionHasDivineShield = false;\n  //     }\n  //     if (opponentMinionHasDivineShield) {\n  //       myCardArray[0].health =\n  //         myCardArray[0].health - opponentsArray[0].attack;\n  //       opponentMinionHasDivineShield = false;\n  //     }\n  //     myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n  //     opponentsArray[0].health =\n  //       opponentsArray[0].health - myCardArray[0].attack;\n  //   }\n  //   if (myCardArray[0].health < 1) {\n  //     myCardArray.shift();\n  //   }\n  //   if (opponentsArray[0].health < 1) {\n  //     opponentsArray.shift();\n  //   }\n  // }\n  // if (myCardArray.length === 0 && opponentsArray.length === 0) {\n  //   return [\"draw\", card2];\n  // }\n  // if (myCardArray.length === 0) {\n  //   return [\"loose\", card2];\n  // }\n  // if (opponentsArray.length === 0) {\n  //   return [\"win\", card2];\n  // }\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCardArray","minions","opponentsArray","myMinionHasDivineShield","keywords","includes","opponentMinionHasDivineShield","length","health","attack","shift","fightAll","myCard","results","map","opponent","console","log","win","filter","result","loose","draw","fightArrays"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n  let myMinionHasDivineShield =\n    myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield =\n    opponentsArray[0].keywords.includes(\"Divine Shield\");\n\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n        myMinionHasDivineShield = false;\n        opponentMinionHasDivineShield = false;\n      }\n      if (myMinionHasDivineShield) {\n        opponentsArray[0].health =\n          opponentsArray[0].health - myCardArray[0].attack;\n        myMinionHasDivineShield = false;\n      }\n      if (opponentMinionHasDivineShield) {\n        myCardArray[0].health =\n          myCardArray[0].health - opponentsArray[0].attack;\n        opponentMinionHasDivineShield = false;\n      }\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health =\n        opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    console.log(myCard, opponent, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n\n  return {\n    win: results.filter((result) => result[0] === \"win\").length,\n    loose: results.filter((result) => result[0] === \"loose\").length,\n    draw: results.filter((result) => result[0] === \"draw\").length,\n  };\n}\n\nfunction fightArrays(card1, card2) {\n  // const myCardArray = [card1, ...card1.minions];\n  // const opponentsArray = [card2, ...card2.minions];\n  // let myMinionHasDivineShield =\n  //   myCardArray[0].keywords.includes(\"Divine Shield\");\n  // let opponentMinionHasDivineShield =\n  //   opponentsArray[0].keywords.includes(\"Divine Shield\");\n  // while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n  //   while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n  //     if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n  //       return [\"draw\", card2];\n  //     }\n  //     if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n  //       myMinionHasDivineShield = false;\n  //       opponentMinionHasDivineShield = false;\n  //     }\n  //     if (myMinionHasDivineShield) {\n  //       opponentsArray[0].health =\n  //         opponentsArray[0].health - myCardArray[0].attack;\n  //       myMinionHasDivineShield = false;\n  //     }\n  //     if (opponentMinionHasDivineShield) {\n  //       myCardArray[0].health =\n  //         myCardArray[0].health - opponentsArray[0].attack;\n  //       opponentMinionHasDivineShield = false;\n  //     }\n  //     myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n  //     opponentsArray[0].health =\n  //       opponentsArray[0].health - myCardArray[0].attack;\n  //   }\n  //   if (myCardArray[0].health < 1) {\n  //     myCardArray.shift();\n  //   }\n  //   if (opponentsArray[0].health < 1) {\n  //     opponentsArray.shift();\n  //   }\n  // }\n  // if (myCardArray.length === 0 && opponentsArray.length === 0) {\n  //   return [\"draw\", card2];\n  // }\n  // if (myCardArray.length === 0) {\n  //   return [\"loose\", card2];\n  // }\n  // if (opponentsArray.length === 0) {\n  //   return [\"win\", card2];\n  // }\n}\n"],"mappings":"AAAA,OAAOA,eAAe,MAAM,+BAA+B;AAE3D,SAASC,KAAKA,CAACC,KAAK,EAAEC,KAAK,EAAE;EAC3B,MAAMC,WAAW,GAAG,CAACF,KAAK,EAAE,GAAGA,KAAK,CAACG,OAAO,CAAC;EAC7C,MAAMC,cAAc,GAAG,CAACH,KAAK,EAAE,GAAGA,KAAK,CAACE,OAAO,CAAC;EAChD,IAAIE,uBAAuB,GACzBH,WAAW,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC;EACnD,IAAIC,6BAA6B,GAC/BJ,cAAc,CAAC,CAAC,CAAC,CAACE,QAAQ,CAACC,QAAQ,CAAC,eAAe,CAAC;EAEtD,OAAOL,WAAW,CAACO,MAAM,KAAK,CAAC,IAAIL,cAAc,CAACK,MAAM,KAAK,CAAC,EAAE;IAC9D,OAAOP,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC,IAAIN,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAG,CAAC,EAAE;MAChE,IAAIR,WAAW,CAAC,CAAC,CAAC,CAACS,MAAM,KAAK,CAAC,IAAIP,cAAc,CAAC,CAAC,CAAC,CAACO,MAAM,KAAK,CAAC,EAAE;QACjE,OAAO,CAAC,MAAM,EAAEV,KAAK,CAAC;MACxB;MACA,IAAII,uBAAuB,IAAIG,6BAA6B,EAAE;QAC5DH,uBAAuB,GAAG,KAAK;QAC/BG,6BAA6B,GAAG,KAAK;MACvC;MACA,IAAIH,uBAAuB,EAAE;QAC3BD,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GACtBN,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAGR,WAAW,CAAC,CAAC,CAAC,CAACS,MAAM;QAClDN,uBAAuB,GAAG,KAAK;MACjC;MACA,IAAIG,6BAA6B,EAAE;QACjCN,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GACnBR,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAGN,cAAc,CAAC,CAAC,CAAC,CAACO,MAAM;QAClDH,6BAA6B,GAAG,KAAK;MACvC;MACAN,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAGR,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAGN,cAAc,CAAC,CAAC,CAAC,CAACO,MAAM;MACxEP,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GACtBN,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAGR,WAAW,CAAC,CAAC,CAAC,CAACS,MAAM;IACpD;IACA,IAAIT,WAAW,CAAC,CAAC,CAAC,CAACQ,MAAM,GAAG,CAAC,EAAE;MAC7BR,WAAW,CAACU,KAAK,CAAC,CAAC;IACrB;IACA,IAAIR,cAAc,CAAC,CAAC,CAAC,CAACM,MAAM,GAAG,CAAC,EAAE;MAChCN,cAAc,CAACQ,KAAK,CAAC,CAAC;IACxB;EACF;EACA,IAAIV,WAAW,CAACO,MAAM,KAAK,CAAC,IAAIL,cAAc,CAACK,MAAM,KAAK,CAAC,EAAE;IAC3D,OAAO,CAAC,MAAM,EAAER,KAAK,CAAC;EACxB;EACA,IAAIC,WAAW,CAACO,MAAM,KAAK,CAAC,EAAE;IAC5B,OAAO,CAAC,OAAO,EAAER,KAAK,CAAC;EACzB;EACA,IAAIG,cAAc,CAACK,MAAM,KAAK,CAAC,EAAE;IAC/B,OAAO,CAAC,KAAK,EAAER,KAAK,CAAC;EACvB;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;AACF;AAEA,OAAO,SAASY,QAAQA,CAACC,MAAM,EAAE;EAC/B,IAAIC,OAAO,GAAGjB,eAAe,CAACkB,GAAG,CAAEC,QAAQ,IAAK;IAC9CC,OAAO,CAACC,GAAG,CAACL,MAAM,EAAEG,QAAQ,EAAElB,KAAK,CAACe,MAAM,EAAEG,QAAQ,CAAC,CAAC;IACtD,OAAOlB,KAAK,CAACe,MAAM,EAAEG,QAAQ,CAAC;EAChC,CAAC,CAAC;EAEF,OAAO;IACLG,GAAG,EAAEL,OAAO,CAACM,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAACb,MAAM;IAC3Dc,KAAK,EAAER,OAAO,CAACM,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAACb,MAAM;IAC/De,IAAI,EAAET,OAAO,CAACM,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAACb;EACzD,CAAC;AACH;AAEA,SAASgB,WAAWA,CAACzB,KAAK,EAAEC,KAAK,EAAE;EACjC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}