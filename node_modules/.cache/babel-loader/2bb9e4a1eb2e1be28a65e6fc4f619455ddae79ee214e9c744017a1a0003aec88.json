{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Set result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n\n  // Return result\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}\nfunction fightArrays(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", null];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card1];\n  }\n}\nconst foo = fightArrays(CardDefinitions[4], CardDefinitions[4]);\nconsole.log(foo);","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","myCardHasDevineShield","keywords","includes","opponentHasDevineShield","attack","health","fightAll","results","map","win","filter","length","loose","draw","fightArrays","myCardArray","minions","opponentsArray","shift","foo","console","log"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n  let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCardHasDevineShield && opponentHasDevineShield) {\n    myCardHasDevineShield = false;\n    opponentHasDevineShield = false;\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCardHasDevineShield && opponent.attack > 0) {\n    opponent.health = opponent.health - myCard.attack;\n    myCardHasDevineShield = false;\n  }\n  if (opponentHasDevineShield && myCard.attack > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponentHasDevineShield = false;\n  }\n\n  // Simulate the fight until one card has <1 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Set result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n\n  // Return result\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    // console.log(myCard.name, opponent.name, fight(myCard, opponent));\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n\nfunction fightArrays(card1, card2) {\n  const myCardArray = [card1, ...card1.minions];\n  const opponentsArray = [card2, ...card2.minions];\n\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health =\n        opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n    }\n  }\n  if (myCardArray.length === 0 && opponentsArray.length === 0) {\n    return [\"draw\", null];\n  }\n  if (myCardArray.length === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArray.length === 0) {\n    return [\"win\", card1];\n  }\n}\n\nconst foo = fightArrays(CardDefinitions[4], CardDefinitions[4]);\nconsole.log(foo);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}