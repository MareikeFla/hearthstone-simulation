{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCardArray = [card1, ...card1.minions];\n  let opponentsArray = [card2, ...card2.minions];\n  let myMinionHasDivineShield = myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield = opponentsArray[0].keywords.includes(\"Divine Shield\");\n  let myCardArrayLength = myCardArray.length;\n  let opponentsArrayLength = opponentsArray.length;\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    console.log(myCardArray[0].name, myCardArray.length, opponentsArray[0].name, opponentsArray.length);\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n        myMinionHasDivineShield = false;\n        opponentMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from both cards\");\n      }\n      if (myMinionHasDivineShield) {\n        opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n        myMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from my card\");\n      }\n      if (opponentMinionHasDivineShield) {\n        myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n        opponentMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from opponent\");\n      }\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health = opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n      myCardArrayLength = myCardArray.length;\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n      opponentsArrayLength = opponentsArray.length;\n    }\n  }\n  myCardArray = [card1, ...card1.minions];\n  if (myCardArrayLength === 0 && opponentsArrayLength === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArrayLength === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArrayLength === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\nexport function fightAll(myCard) {\n  const results = [];\n  CardDefinitions.forEach(card => {\n    results.push(fight(myCard, card));\n  });\n  return results;\n  // let results = CardDefinitions.map((opponent) => {\n  //   return fight(myCard, opponent);\n  // });\n  // return results;\n\n  // return {\n  //   win: results.filter((result) => result[0] === \"win\").length,\n  //   loose: results.filter((result) => result[0] === \"loose\").length,\n  //   draw: results.filter((result) => result[0] === \"draw\").length,\n  // };\n}\nconst foo = fight(CardDefinitions[0], CardDefinitions[6]);\nconsole.log(foo);\nconst foo2 = fightAll(CardDefinitions[1]);\nconsole.log(foo2);","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCardArray","minions","opponentsArray","myMinionHasDivineShield","keywords","includes","opponentMinionHasDivineShield","myCardArrayLength","length","opponentsArrayLength","console","log","name","health","attack","shift","fightAll","myCard","results","forEach","card","push","foo","foo2"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCardArray = [card1, ...card1.minions];\n  let opponentsArray = [card2, ...card2.minions];\n  let myMinionHasDivineShield =\n    myCardArray[0].keywords.includes(\"Divine Shield\");\n  let opponentMinionHasDivineShield =\n    opponentsArray[0].keywords.includes(\"Divine Shield\");\n\n  let myCardArrayLength = myCardArray.length;\n  let opponentsArrayLength = opponentsArray.length;\n\n  while (myCardArray.length !== 0 && opponentsArray.length !== 0) {\n    console.log(\n      myCardArray[0].name,\n      myCardArray.length,\n      opponentsArray[0].name,\n      opponentsArray.length\n    );\n    while (myCardArray[0].health > 0 && opponentsArray[0].health > 0) {\n      if (myCardArray[0].attack === 0 && opponentsArray[0].attack === 0) {\n        return [\"draw\", card2];\n      }\n      if (myMinionHasDivineShield && opponentMinionHasDivineShield) {\n        myMinionHasDivineShield = false;\n        opponentMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from both cards\");\n      }\n      if (myMinionHasDivineShield) {\n        opponentsArray[0].health =\n          opponentsArray[0].health - myCardArray[0].attack;\n        myMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from my card\");\n      }\n      if (opponentMinionHasDivineShield) {\n        myCardArray[0].health =\n          myCardArray[0].health - opponentsArray[0].attack;\n        opponentMinionHasDivineShield = false;\n        console.log(\"Removed Devine Shield from opponent\");\n      }\n\n      myCardArray[0].health = myCardArray[0].health - opponentsArray[0].attack;\n      opponentsArray[0].health =\n        opponentsArray[0].health - myCardArray[0].attack;\n    }\n    if (myCardArray[0].health < 1) {\n      myCardArray.shift();\n      myCardArrayLength = myCardArray.length;\n    }\n    if (opponentsArray[0].health < 1) {\n      opponentsArray.shift();\n      opponentsArrayLength = opponentsArray.length;\n    }\n  }\n  myCardArray = [card1, ...card1.minions];\n\n  if (myCardArrayLength === 0 && opponentsArrayLength === 0) {\n    return [\"draw\", card2];\n  }\n  if (myCardArrayLength === 0) {\n    return [\"loose\", card2];\n  }\n  if (opponentsArrayLength === 0) {\n    return [\"win\", card2];\n  }\n  // let myCard = { ...card1 };\n  // let opponent = { ...card2 };\n  // let result = null;\n  // let myCardHasDevineShield = myCard.keywords.includes(\"Divine Shield\");\n  // let opponentHasDevineShield = opponent.keywords.includes(\"Divine Shield\");\n\n  // // Prevent endless loop when both have 0 attack\n  // if (myCard.attack === 0 && opponent.attack === 0) {\n  //   return \"draw\";\n  // }\n\n  // // Check if both have Divine Shield and remove it if so\n  // if (myCardHasDevineShield && opponentHasDevineShield) {\n  //   myCardHasDevineShield = false;\n  //   opponentHasDevineShield = false;\n  // }\n  // // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  // if (myCardHasDevineShield && opponent.attack > 0) {\n  //   opponent.health = opponent.health - myCard.attack;\n  //   myCardHasDevineShield = false;\n  // }\n  // if (opponentHasDevineShield && myCard.attack > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponentHasDevineShield = false;\n  // }\n\n  // // Simulate the fight until one card has <1 health\n  // while (myCard.health > 0 && opponent.health > 0) {\n  //   myCard.health = myCard.health - opponent.attack;\n  //   opponent.health = opponent.health - myCard.attack;\n  // }\n\n  // // Set result\n  // if (myCard.health > 0) {\n  //   result = \"win\";\n  // } else if (opponent.health > 0) {\n  //   result = \"loose\";\n  // } else {\n  //   result = \"draw\";\n  // }\n\n  // // Return result\n  // return result;\n}\n\nexport function fightAll(myCard) {\n  const results = [];\n  CardDefinitions.forEach((card) => {\n    results.push(fight(myCard, card));\n  });\n  return results;\n  // let results = CardDefinitions.map((opponent) => {\n  //   return fight(myCard, opponent);\n  // });\n  // return results;\n\n  // return {\n  //   win: results.filter((result) => result[0] === \"win\").length,\n  //   loose: results.filter((result) => result[0] === \"loose\").length,\n  //   draw: results.filter((result) => result[0] === \"draw\").length,\n  // };\n}\n\nconst foo = fight(CardDefinitions[0], CardDefinitions[6]);\nconsole.log(foo);\n\nconst foo2 = fightAll(CardDefinitions[1]);\nconsole.log(foo2);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}