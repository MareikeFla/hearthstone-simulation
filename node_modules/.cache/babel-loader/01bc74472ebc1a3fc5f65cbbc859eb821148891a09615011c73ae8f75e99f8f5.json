{"ast":null,"code":"import CardDefinitions from \"../Components/CardDefinitions\";\nfunction fight(card1, card2) {\n  let myCard = {\n    ...card1\n  };\n  let opponent = {\n    ...card2\n  };\n  let result = null;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (myCard.keywords.includes(\"Divine Shield\") && opponent.keywords.includes(\"Divine Shield\")) {\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\")) {\n    opponent.health = opponent.health - myCard.attack;\n    myCard.keywords.splice(myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"), myCard.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n  }\n  if (opponent.keywords.includes(\"Divine Shield\")) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"), opponent.keywords.findIndex(keyword => keyword === \"Divine Shield\"));\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map(opponent => {\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter(result => result === \"win\").length,\n    loose: results.filter(result => result === \"loose\").length,\n    draw: results.filter(result => result === \"draw\").length\n  };\n}","map":{"version":3,"names":["CardDefinitions","fight","card1","card2","myCard","opponent","result","attack","keywords","includes","splice","findIndex","keyword","health","fightAll","results","map","win","filter","length","loose","draw"],"sources":["/Users/mareike/Projekte/hearthstone/src/lib/fight.js"],"sourcesContent":["import CardDefinitions from \"../Components/CardDefinitions\";\n\nfunction fight(card1, card2) {\n  let myCard = { ...card1 };\n  let opponent = { ...card2 };\n  let result = null;\n\n  // Prevent endless loop when both have 0 attack\n  if (myCard.attack === 0 && opponent.attack === 0) {\n    return \"draw\";\n  }\n\n  // Check if both have Divine Shield and remove it if so\n  if (\n    myCard.keywords.includes(\"Divine Shield\") &&\n    opponent.keywords.includes(\"Divine Shield\")\n  ) {\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n  }\n  // Check for Divine Shield and simulate the first attack without getting damaged, remove Devine Shield\n\n  if (myCard.keywords.includes(\"Divine Shield\")) {\n    opponent.health = opponent.health - myCard.attack;\n    myCard.keywords.splice(\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      myCard.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n  }\n  if (opponent.keywords.includes(\"Divine Shield\")) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.keywords.splice(\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\"),\n      opponent.keywords.findIndex((keyword) => keyword === \"Divine Shield\")\n    );\n  }\n\n  // Simulate the fight until one card has 0/<0 health\n  while (myCard.health > 0 && opponent.health > 0) {\n    myCard.health = myCard.health - opponent.attack;\n    opponent.health = opponent.health - myCard.attack;\n  }\n\n  // Return result\n  if (myCard.health > 0) {\n    result = \"win\";\n  } else if (opponent.health > 0) {\n    result = \"loose\";\n  } else {\n    result = \"draw\";\n  }\n  return result;\n}\n\nexport function fightAll(myCard) {\n  let results = CardDefinitions.map((opponent) => {\n    return fight(myCard, opponent);\n  });\n  return {\n    win: results.filter((result) => result === \"win\").length,\n    loose: results.filter((result) => result === \"loose\").length,\n    draw: results.filter((result) => result === \"draw\").length,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}